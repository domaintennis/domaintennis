diff --git a/editors/ckeditor.inc b/editors/ckeditor.inc
index 3f7d16d..d70419a 100644
--- a/editors/ckeditor.inc
+++ b/editors/ckeditor.inc
@@ -5,6 +5,10 @@
  * Editor integration functions for CKEditor.
  */
 
+define('WYSIWYG_CKEDITOR_ACF_DISABLED', 0);
+define('WYSIWYG_CKEDITOR_ACF_AUTOMATIC', 1);
+define('WYSIWYG_CKEDITOR_ACF_CUSTOM', 2);
+
 /**
  * Plugin implementation of hook_editor().
  */
@@ -142,6 +146,7 @@ function wysiwyg_ckeditor_settings_form(&$form, &$form_state) {
     'resize_enabled' => TRUE,
     'simple_source_formatting' => FALSE,
     'toolbarLocation' => 'top',
+    'allowedContent' => TRUE,
   );
 
   if (version_compare($installed_version, '3.2.1', '>=')) {
@@ -191,6 +196,36 @@ function wysiwyg_ckeditor_settings_form(&$form, &$form_state) {
     '#description' => t('If enabled, all pasting operations insert plain text into the editor, loosing any formatting information possibly available in the source text. Note: Paste from Word is not affected by this setting.') . ' ' . t('Uses the <a href="@url">@setting</a> setting internally.', array('@setting' => 'forcePasteAsPlainText', '@url' => url('http://docs.ckeditor.com/#!/api/CKEDITOR.config-cfg-forcePasteAsPlainText'))),
   );
 
+  if (version_compare($installed_version, '4.1.0', '>=')) {
+    $form['output']['acf_mode'] = array(
+      '#type' => 'select',
+      '#title' => t('Advanced content filter'),
+      '#options' => array(
+        WYSIWYG_CKEDITOR_ACF_AUTOMATIC => t('Automatic'),
+        WYSIWYG_CKEDITOR_ACF_CUSTOM => t('Custom'),
+        WYSIWYG_CKEDITOR_ACF_DISABLED => t('Disabled'),
+      ),
+      '#default_value' => isset($profile->settings['acf_mode']) ? $profile->settings['acf_mode'] : WYSIWYG_CKEDITOR_ACF_DISABLED,
+      '#description' => t('If set to <em>Automatic</em> or <em>Custom</em>, the editor will strip out any content not explicitely allowed <strong>when the editor loads</strong>. If set to <em>Custom</em>, buttons without a corresponding whitelist rule will be disabled. See <a href="@url">@url</a> for details.', array('@url' => url('http://docs.ckeditor.com/#!/guide/dev_advanced_content_filter'))),
+    );
+
+    $form['output']['acf_allowed_content'] = array(
+      '#type' => 'textarea',
+      '#title' => t('Allowed content'),
+      '#default_value' => isset($profile->settings['acf_allowed_content']) ? $profile->settings['acf_allowed_content'] : '',
+      '#description' => t('Rules for whitelisting content for the advanced content filter. Both string and object formats accepted. See <a href="@url">@url</a> for details.', array('@url' => url('http://docs.ckeditor.com/#!/guide/dev_allowed_content_rules'))),
+      '#states' => array(
+        'visible' => array(
+          ':input[name="acf_mode"]' => array(
+            array('value' => WYSIWYG_CKEDITOR_ACF_AUTOMATIC),
+            array('value' => WYSIWYG_CKEDITOR_ACF_CUSTOM),
+          ),
+        ),
+      ),
+      '#element_validate' => array('wysiwyg_ckeditor_settings_form_validate_allowed_content'),
+    );
+  }
+
   if (version_compare($installed_version, '3.6.0', '>=')) {
     $form['appearance']['default_toolbar_grouping'] = array(
       '#type' => 'checkbox',
@@ -200,6 +235,7 @@ function wysiwyg_ckeditor_settings_form(&$form, &$form_state) {
       '#description' => t('This option gives you the ability to enable/disable the usage of default groupings for toolbar buttons. If enabled, toolbar buttons will be placed into predetermined groups instead of all in a single group.'),
     );
   }
+
   if (version_compare($installed_version, '3.2.1', '>=')) {
     // Versions below 3.2.1 do not support Font styles at all.
     $form['css']['stylesSet'] = array(
@@ -227,6 +263,15 @@ function wysiwyg_ckeditor_settings_form(&$form, &$form_state) {
 }
 
 /**
+ * #element_validate handler for ACF Allowed Content element altered by wysiwyg_ckeditor_settings_form().
+ */
+function wysiwyg_ckeditor_settings_form_validate_allowed_content($element, &$form_state) {
+  if (_wysiwyg_ckeditor_settings_acf_is_obj($element['#value']) && json_decode($element['#value']) === NULL) {
+    form_error($element, t('Allowed content is not valid JSON.'));
+  }
+}
+
+/**
  * #element_validate handler for CSS classes element altered by wysiwyg_ckeditor_settings_form().
  */
 function wysiwyg_ckeditor_settings_form_validate_stylessets($element, &$form_state) {
@@ -311,6 +356,27 @@ function wysiwyg_ckeditor_settings($editor, $config, $theme) {
     $settings['format_tags'] = implode(';', $block_formats);
   }
 
+  // Advanced Content Filter
+  // http://docs.ckeditor.com/#!/guide/dev_advanced_content_filter
+  if (!isset($config['acf_mode']) || WYSIWYG_CKEDITOR_ACF_DISABLED == $config['acf_mode']) {
+    $settings['allowedContent'] = TRUE;
+  }
+  else {
+    if (_wysiwyg_ckeditor_settings_acf_is_obj($config['acf_allowed_content'])) {
+      $acf_content = json_decode($config['acf_allowed_content']);
+    }
+    else {
+      $acf_content = $config['acf_allowed_content'];
+    }
+
+    if (WYSIWYG_CKEDITOR_ACF_CUSTOM == $config['acf_mode']) {
+      $settings['allowedContent'] = $acf_content;
+    }
+    elseif (WYSIWYG_CKEDITOR_ACF_AUTOMATIC == $config['acf_mode']) {
+      $settings['extraAllowedContent'] = $acf_content;
+    }
+  }
+
   if (isset($config['css_setting'])) {
     // Versions below 3.0.1 could only handle one stylesheet.
     if (version_compare($editor['installed version'], '3.0.1.4391', '<')) {
@@ -664,3 +730,15 @@ function _wysiwyg_ckeditor_group($button) {
   }
   return $group;
 }
+
+/**
+ * Determine if string is supposed to be ACF obj format
+ * http://docs.ckeditor.com/#!/guide/dev_allowed_content_rules
+ */
+function _wysiwyg_ckeditor_settings_acf_is_obj($string) {
+  if (strstr($string, ':') === FALSE) {
+    return FALSE;
+  }
+
+  return TRUE;
+}
